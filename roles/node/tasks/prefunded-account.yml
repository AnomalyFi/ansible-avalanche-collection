# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2022-2023, E36 Knots
---
- name: Wait for blockchains to be bootstrapped
  uri:
    url: "{{ avalanchego_http_protocol }}://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/info"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: info.isBootstrapped
      params:
        chain: "{{ item }}"
      id: 1
  register: bootstrapped_res
  failed_when: (bootstrapped_res.status != 200) or (bootstrapped_res.json.error is defined)
  loop:
    - P
    - X
    - C
  until: bootstrapped_res.json.result.isBootstrapped
  retries: 10

- name: Check if pre-funded account user already exists
  uri:
    url: "{{ avalanchego_http_protocol }}://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/keystore"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: keystore.listUsers
      id: 1
  register: users_list_res

- name: Create pre-funded account user
  uri:
    url: "{{ avalanchego_http_protocol }}://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/keystore"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: keystore.createUser
      params:
        username: "{{ avalanche_prefunded_username }}"
        password: "{{ avalanche_prefunded_password }}"
      id: 1
  when: avalanche_prefunded_username not in users_list_res.json.result.users
  register: users_create_res
  failed_when: (users_create_res.status != 200) or (users_create_res.json.error is defined)

- name: Give pre-funded account control over X-Chain address
  uri:
    url: "{{ avalanchego_http_protocol }}://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/X"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: avm.importKey
      params:
        username: "{{ avalanche_prefunded_username }}"
        password: "{{ avalanche_prefunded_password }}"
        privateKey: "{{ avalanche_prefunded_private_key }}"
      id: 1
  register: import_key_res
  failed_when: (import_key_res.status != 200) or (import_key_res.json.error is defined)

- name: Display created X-Chain address
  debug:
    msg: "X-Chain address = {{ import_key_res.json.result.address }}"

- name: Give pre-funded account control over P-Chain address
  uri:
    url: "{{ avalanchego_http_protocol }}://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.importKey
      params:
        username: "{{ avalanche_prefunded_username }}"
        password: "{{ avalanche_prefunded_password }}"
        privateKey: "{{ avalanche_prefunded_private_key }}"
      id: 1
  register: import_key_res
  failed_when: (import_key_res.status != 200) or (import_key_res.json.error is defined)

- name: Display created P-Chain address
  debug:
    msg: "P-Chain address = {{ import_key_res.json.result.address }}"

- name: Give pre-funded account control over C-Chain address
  uri:
    url: "{{ avalanchego_http_protocol }}://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/C/avax"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: avax.importKey
      params:
        username: "{{ avalanche_prefunded_username }}"
        password: "{{ avalanche_prefunded_password }}"
        privateKey: "{{ avalanche_prefunded_private_key }}"
      id: 1
  register: import_key_res
  failed_when: (import_key_res.status != 200) or (import_key_res.json.error is defined)

- name: Display created C-Chain address
  debug:
    msg: "C-Chain address = {{ import_key_res.json.result.address }}"
